# syntax=docker/dockerfile:1

# Create a stage for building the application.
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine3.20 AS build
COPY . /source

WORKDIR /source/Arcadia.WebApp

# This is the architecture youâ€™re building for, which is passed in by the builder.
# Placing it here allows the previous steps to be cached across architectures.
ARG TARGETARCH

# Build the application.
# Leverage a cache mount to /root/.nuget/packages so that subsequent builds don't have to re-download packages.
# If TARGETARCH is "amd64", replace it with "x64" - "x64" is .NET's canonical name for this and "amd64" doesn't
#   work in .NET 6.0.
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app

# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the build stage where the necessary files are copied from the build
# stage.
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine3.20 AS final
WORKDIR /app

# Copy everything needed to run the app from the "build" stage.
COPY --from=build /app .

# Switch to a non-privileged user (defined in the base image) that the app will run under.
USER $APP_UID

# Set entrypoint
EXPOSE 8080
ENTRYPOINT ["dotnet", "Arcadia.WebApp.dll"]

# # Copy and restore the dependencies
# COPY Arcadia.WebApp/*.csproj Arcadia.WebApp/
# COPY Arcadia.Shared/*.csproj Arcadia.Shared/
# RUN dotnet restore Arcadia.WebApp/Arcadia.WebApp.csproj

# # Copy the entire project and build the app
# COPY . .
# WORKDIR /src/Arcadia.WebApp
# RUN dotnet publish -c Release -o /app/publish

# # Use the runtime image for deployment
# FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
# WORKDIR /app
# COPY --from=build /app/publish .

# # Expose the port and set the entry point
# EXPOSE 8080
# ENTRYPOINT ["dotnet", "Arcadia.WebApp.dll"]

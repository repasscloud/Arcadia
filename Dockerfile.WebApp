# syntax=docker/dockerfile:1

# Create a stage for building the application.
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine3.20 AS build
COPY . /source

WORKDIR /source/Arcadia.WebApp

# Define the architecture for building
ARG TARGETARCH

# Build the application
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app

# Create a new stage for running the application
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine3.20 AS final
WORKDIR /app

# Copy everything needed to run the app from the "build" stage.
COPY --from=build /app .

# Ensure the keys directory exists and has appropriate permissions
RUN mkdir -p /app/dataprotection-keys && chmod -R 700 /app/dataprotection-keys

# Copy the PFX certificate into the container
COPY ./certificates/arcadia_webapp_cert.pfx /app/dataprotection-keys/arcadia_cert.pfx

# Switch to a non-privileged user (defined in the base image) that the app will run under.
USER $APP_UID

# Set entrypoint
EXPOSE 8080
ENTRYPOINT ["dotnet", "Arcadia.WebApp.dll"]

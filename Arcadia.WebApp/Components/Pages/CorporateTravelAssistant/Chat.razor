@page "/chat"

<PageTitle>Corporate Travel Assistant</PageTitle>

<div class="chat-container">
    <div class="chat-header">Corporate Travel Assistant</div>
    <div class="chat-body" @ref="chatBody">
        @foreach (var message in Messages)
        {
            @if (message.IsLoading)
            {
                <div class="message system loading-dots">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                </div>
            }
            else
            {
                <div class="message @(message.IsSystem ? "system" : "user")">@((MarkupString)message.Content)</div>
            }
        }
    </div>
    <div class="chat-footer">
        @if (AvailableButtons.Any())
        {
            <div class="button-group">
                @foreach (var button in AvailableButtons)
                {
                    <button class="btn btn-primary" @onclick="() => HandleButtonClick(button.Action)">@button.Text</button>
                }
            </div>
        }
        <form @onsubmit="HandleSubmit">
            <div class="input-group custom-input-group">
                <input type="text"
                       @bind="UserInput"
                       placeholder="Type your message here..."
                       class="form-control custom-input"
                       @ref="inputElement"
                       aria-label="Chat message input" />
                <button type="submit" class="btn btn-primary custom-send-button" aria-label="Send message">Send</button>
            </div>
        </form>
    </div>
</div>

@inject IJSRuntime JS

@code {
    private List<Message> Messages { get; set; } = new List<Message>
    {
        new Message { Content = "Welcome! How can I assist you today?", IsSystem = true }
    };

    private string UserInput { get; set; } = string.Empty;
    private List<ChatButton> AvailableButtons { get; set; } = new List<ChatButton>();
    private ElementReference chatBody;
    private ElementReference inputElement;
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize with default buttons
        AvailableButtons = new List<ChatButton>
        {
            new ChatButton { Text = "Create a new booking", Action = "Create a new booking" },
            new ChatButton { Text = "Manage an existing booking", Action = "Manage an existing booking" },
            new ChatButton { Text = "Speak to a human", Action = "Speak to a human" }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputElement.FocusAsync();
            await ScrollToBottom();
        }
    }

    private async Task HandleButtonClick(string action)
    {
        // Add the user's selection as a message
        Messages.Add(new Message { Content = action, IsSystem = false });
        AvailableButtons.Clear();
        IsLoading = true;

        // Add "..." system message to indicate thinking
        var loadingMessage = new Message { Content = "", IsSystem = true, IsLoading = true };
        Messages.Add(loadingMessage);
        StateHasChanged(); // Ensure UI updates

        // Simulate API response
        string jsonPayload = "";

        // Define responses based on the action
        if (action == "Create a new booking")
        {
            jsonPayload = @"
            {
                ""response"": ""What would you like to book? Flights, Accommodation, or Car Hire?"",
                ""buttons"": [
                    { ""text"": ""Flights"", ""action"": ""Book Flights"" },
                    { ""text"": ""Accommodation"", ""action"": ""Book Accommodation"" },
                    { ""text"": ""Car Hire"", ""action"": ""Book Car Hire"" }
                ]
            }";
        }
        else if (action == "Manage an existing booking")
        {
            jsonPayload = @"
            {
                ""response"": ""Please provide your booking ID."",
                ""buttons"": [
                    { ""text"": ""Back to Main Menu"", ""action"": ""Back to Main Menu"" }
                ]
            }";
        }
        else if (action == "Speak to a human")
        {
            jsonPayload = @"
            {
                ""response"": ""Connecting you to a human agent..."",
                ""buttons"": []
            }";
        }
        else if (action.StartsWith("Book "))
        {
            // Example: "Book Flights", "Book Accommodation", "Book Car Hire"
            string bookingType = action.Replace("Book ", "");
            jsonPayload = $@"
            {{
                ""response"": ""You selected to book {bookingType}. Please provide the necessary details."",
                ""buttons"": [
                    {{ ""text"": ""Back to Main Menu"", ""action"": ""Back to Main Menu"" }}
                ]
            }}";
        }
        else if (action == "Back to Main Menu")
        {
            jsonPayload = @"
            {
                ""response"": ""Welcome back! How can I assist you today?"",
                ""buttons"": [
                    { ""text"": ""Create a new booking"", ""action"": ""Create a new booking"" },
                    { ""text"": ""Manage an existing booking"", ""action"": ""Manage an existing booking"" },
                    { ""text"": ""Speak to a human"", ""action"": ""Speak to a human"" }
                ]
            }";
        }
        else
        {
            // Default response for unhandled actions
            jsonPayload = @"
            {
                ""response"": ""I'm not sure how to help with that. Please choose an option below."",
                ""buttons"": [
                    { ""text"": ""Back to Main Menu"", ""action"": ""Back to Main Menu"" }
                ]
            }";
        }

        await SimulateApiResponse(jsonPayload, loadingMessage);

        IsLoading = false;
        await ScrollToBottom();
    }

    private async Task HandleSubmit()
    {
        await SendMessage();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(UserInput))
        {
            // Add user message
            Messages.Add(new Message { Content = UserInput, IsSystem = false });
            AvailableButtons.Clear();
            IsLoading = true;

            // Add "..." system message to indicate thinking
            var loadingMessage = new Message { Content = "", IsSystem = true, IsLoading = true };
            Messages.Add(loadingMessage);
            StateHasChanged(); // Ensure UI updates

            // Simulate API response with the user's input echoed back
            string jsonPayload = @"
            {
                ""response"": ""You said: '" + System.Text.Json.JsonSerializer.Serialize(UserInput) + @"'"",
                ""buttons"": []
            }";

            await SimulateApiResponse(jsonPayload, loadingMessage);

            UserInput = string.Empty;
            IsLoading = false;
            await ScrollToBottom();
        }
    }

    private async Task SimulateApiResponse(string jsonPayload, Message loadingMessage)
    {
        // Simulate API processing time
        await Task.Delay(2000); // 2-second delay

        try
        {
            var apiResponse = System.Text.Json.JsonSerializer.Deserialize<ApiResponse>(jsonPayload, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (apiResponse != null)
            {
                // Replace "..." with the actual response
                loadingMessage.Content = apiResponse.Response;
                loadingMessage.IsLoading = false;

                if (apiResponse.Buttons != null && apiResponse.Buttons.Any())
                {
                    AvailableButtons = apiResponse.Buttons.Select(b => new ChatButton
                    {
                        Text = b.Text,
                        Action = b.Action
                    }).ToList();
                }
                else
                {
                    AvailableButtons.Clear();
                }
            }
        }
        catch (System.Text.Json.JsonException)
        {
            // Replace "..." with an error message
            loadingMessage.Content = "Oops! There was an error processing your request.";
            loadingMessage.IsLoading = false;
            AvailableButtons.Clear();
        }

        // Trigger UI update
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", chatBody);
    }

    private class Message
    {
        public string Content { get; set; } = string.Empty;
        public bool IsSystem { get; set; }
        public bool IsLoading { get; set; } = false;
    }

    private class ChatButton
    {
        public string Text { get; set; } = string.Empty;
        public string Action { get; set; } = string.Empty;
    }

    private class ApiResponse
    {
        public string Response { get; set; } = string.Empty;
        public List<ApiButton> Buttons { get; set; } = new List<ApiButton>();
    }

    private class ApiButton
    {
        public string Text { get; set; } = string.Empty;
        public string Action { get; set; } = string.Empty;
    }
}

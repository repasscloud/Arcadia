@page "/chat2"

@using Arcadia.Shared.Models.WebApp.CorporateTravelAssistant
@using Arcadia.WebApp.Interfaces
@inject ICorporateTravelAssistantService TravelAssistantService
@inject IJSRuntime JS

<PageTitle>Corporate Travel Assistant</PageTitle>

<div class="chat-container">
    <div class="chat-header">Corporate Travel Assistant</div>
    <div class="chat-body" @ref="chatBody">
        @foreach (var message in Messages)
        {
            @if (message.IsLoading)
            {
                <div class="message system loading-dots">
                    <span class="dot"></span>
                    <span class="dot"></span>
                    <span class="dot"></span>
                </div>
            }
            else
            {
                <div class="message @(message.IsSystem ? "system" : "user")">@((MarkupString)message.Content)</div>
            }
        }
    </div>
    <div class="chat-footer">
        @if (AvailableButtons.Any())
        {
            <div class="button-group">
                @foreach (var button in AvailableButtons)
                {
                    <button class="btn btn-primary" @onclick="() => HandleButtonClick(button.Action)">@button.Text</button>
                }
            </div>
        }
        <form @onsubmit="HandleSubmit">
            <div class="input-group custom-input-group">
                <input type="text"
                       @bind="UserInput"
                       placeholder="Type your message here..."
                       class="form-control custom-input"
                       @ref="inputElement"
                       aria-label="Chat message input" />
                <button type="submit" class="btn btn-primary custom-send-button" aria-label="Send message">Send</button>
            </div>
        </form>
    </div>
</div>

@code {
    private List<Message> Messages { get; set; } = new List<Message>
    {
        new Message { Content = "Welcome! How can I assist you today?", IsSystem = true }
    };

    private string UserInput { get; set; } = string.Empty;
    private List<ChatButton> AvailableButtons { get; set; } = new List<ChatButton>();
    private ElementReference chatBody;
    private ElementReference inputElement;
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Yield to the scheduler to keep the method asynchronous
        await Task.Yield();

        // Initialize with default buttons
        AvailableButtons = new List<ChatButton>
        {
            new ChatButton { Text = "Create a new booking", Action = "Create a new booking" },
            new ChatButton { Text = "Manage an existing booking", Action = "Manage an existing booking" },
            new ChatButton { Text = "Speak to a human", Action = "Speak to a human" }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await inputElement.FocusAsync();
            await ScrollToBottom();
        }
    }

    private async Task HandleButtonClick(string action)
    {
        // Add the user's selection as a message
        Messages.Add(new Message { Content = action, IsSystem = false });
        AvailableButtons.Clear();
        IsLoading = true;

        // Add "..." system message to indicate thinking
        var loadingMessage = new Message { Content = "", IsSystem = true, IsLoading = true };
        Messages.Add(loadingMessage);
        StateHasChanged(); // Ensure UI updates

        try
        {
            var apiResponse = await TravelAssistantService.SendMessageAsync(action);
            // Replace loading message with actual response
            loadingMessage.Content = apiResponse.Response;
            loadingMessage.IsLoading = false;

            if (apiResponse.Buttons != null && apiResponse.Buttons.Any())
            {
                AvailableButtons = apiResponse.Buttons.Select(b => new ChatButton
                {
                    Text = b.Text,
                    Action = b.Action
                }).ToList();
            }
            else
            {
                AvailableButtons.Clear();
            }
        }
        catch (Exception ex)
        {
            loadingMessage.Content = $"Oops! There was an error processing your request: {ex.Message}";
            loadingMessage.IsLoading = false;
            AvailableButtons.Clear();
        }

        IsLoading = false;
        await ScrollToBottom();
    }

    private async Task HandleSubmit()
    {
        await SendMessage();
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(UserInput))
        {
            // Add user message
            Messages.Add(new Message { Content = UserInput, IsSystem = false });
            AvailableButtons.Clear();
            var input = UserInput;
            UserInput = string.Empty;
            IsLoading = true;

            // Add "..." system message to indicate thinking
            var loadingMessage = new Message { Content = "", IsSystem = true, IsLoading = true };
            Messages.Add(loadingMessage);
            StateHasChanged(); // Ensure UI updates

            try
            {
                var apiResponse = await TravelAssistantService.SendMessageAsync(input);
                // Replace loading message with actual response
                loadingMessage.Content = apiResponse.Response;
                loadingMessage.IsLoading = false;

                if (apiResponse.Buttons != null && apiResponse.Buttons.Any())
                {
                    AvailableButtons = apiResponse.Buttons.Select(b => new ChatButton
                    {
                        Text = b.Text,
                        Action = b.Action
                    }).ToList();
                }
                else
                {
                    AvailableButtons.Clear();
                }
            }
            catch (Exception ex)
            {
                loadingMessage.Content = $"Oops! There was an error processing your request: {ex.Message}";
                loadingMessage.IsLoading = false;
                AvailableButtons.Clear();
            }

            IsLoading = false;
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("scrollToBottom", chatBody);
    }
}

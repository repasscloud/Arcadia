# syntax=docker/dockerfile:1

# Create a stage for building the application.
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build

COPY . /source

WORKDIR /source/Arcadia.API

# This is the architecture youâ€™re building for, which is passed in by the builder.
ARG TARGETARCH

# Build the application.
RUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \
    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app

# Create a new stage for running the application that contains the minimal
# runtime dependencies for the application. This often uses a different base
# image from the build stage where the necessary files are copied from the build
# stage.
FROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final
WORKDIR /app

# Copy everything needed to run the app from the "build" stage.
COPY --from=build /app .

# Set ASP.NET Core environment variable to enable Swagger
ENV ASPNETCORE_ENVIRONMENT=Development

# Switch to a non-privileged user (defined in the base image) that the app will run under.
USER $APP_UID

EXPOSE 8080
ENTRYPOINT ["dotnet", "Arcadia.API.dll"]
